#include <bits/stdc++.h>

#define lli long long int


class Merge_Union {
public:
	
	vector<lli> arr, size_arr, color;

	

	vector<vector<lli>> graph;

	Merge_Union(int n) {
		arr.resize(n + 1);
		size_arr.resize(n + 1);
		for (int i = 0; i <= n; i++) {
			arr[i] = i; size_arr[i] = 1;
		}
	}
	lli root(lli i) {
		int par = arr[i];
		if (par == i) return par;
		arr[i] = root(par);
		return arr[i];
	}
	bool find(lli a, lli b) {
		if (root(a) == root(b)) return true;
		return false;
	}
	void weighted_union(lli a, lli b) {
		//x-is-a;b-is-y
		//root_a-is-a;root_b-is-b
		lli root_a = root(a);
		lli root_b = root(b);
		if (find(a, b)) {
			
			return;
		}
		
		if (size_arr[root_a] < size_arr[root_b]) {
			//root-b-becomes-parent
			arr[root_a] = root_b;
			size_arr[root_b] += size_arr[root_a];
			

		}
		else {
			//a-becomes-parent
			arr[root_b] = root_a;
			size_arr[root_a] += size_arr[root_b];
			
		}
	};

};
